openapi: 3.0.3
info:
  title: React SSR Demo API
  description: |
    API documentation for the React SSR Demo application built with React Router 7, 
    Cloudflare Workers, and Hono. This API provides endpoints for managing todos 
    and fetching weather data.
  version: 1.0.0
  contact:
    name: API Support
  license:
    name: MIT

servers:
  - url: http://localhost:3006
    description: Local development server
  - url: https://your-app.workers.dev
    description: Production Cloudflare Workers

tags:
  - name: Todos
    description: Todo management operations
  - name: Weather
    description: Weather data operations
  - name: Health
    description: Health check endpoints

paths:
  /api/todos:
    get:
      tags:
        - Todos
      summary: Get all todos
      description: Retrieves a list of all todos from the database
      operationId: getTodos
      responses:
        '200':
          description: Successful response with list of todos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'
              example:
                - id: "1"
                  title: "Buy groceries"
                  completed: false
                  createdAt: "2024-01-15T10:30:00Z"
                  updatedAt: "2024-01-15T10:30:00Z"
                - id: "2"
                  title: "Write documentation"
                  completed: true
                  createdAt: "2024-01-14T09:00:00Z"
                  updatedAt: "2024-01-15T14:20:00Z"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Todos
      summary: Create a new todo
      description: Creates a new todo item
      operationId: createTodo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
                  minLength: 1
                  maxLength: 500
                  description: Todo title
                completed:
                  type: boolean
                  description: Completion status (defaults to false)
                  default: false
            example:
              title: "Complete API documentation"
              completed: false
      responses:
        '201':
          description: Todo created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '400':
          description: Bad request - invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/todos/{id}:
    put:
      tags:
        - Todos
      summary: Update a todo
      description: Updates an existing todo
      operationId: updateTodo
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Todo ID
          example: "550e8400-e29b-41d4-a716-446655440000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: New title
                completed:
                  type: boolean
                  description: Completion status
            examples:
              toggleCompletion:
                summary: Toggle completion status
                value:
                  completed: true
              updateTitle:
                summary: Update title
                value:
                  title: "Updated todo title"
              updateBoth:
                summary: Update both title and completion
                value:
                  title: "Updated todo title"
                  completed: true
      responses:
        '200':
          description: Todo updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '400':
          description: Bad request - invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Todo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Todos
      summary: Delete a todo
      description: Deletes a todo by ID
      operationId: deleteTodo
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Todo ID to delete
          example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        '200':
          description: Todo deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '400':
          description: Bad request - invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Todo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /weather:
    get:
      tags:
        - Weather
      summary: Get weather page
      description: |
        Server-side rendered weather page. Weather data is fetched directly from Open-Meteo API
        in the React Router loader, not through a Hono API endpoint.
      operationId: getWeatherPage
      parameters:
        - name: city
          in: query
          description: City name and country code (e.g., "Tokyo,JP")
          required: false
          schema:
            type: string
            example: "Tokyo,JP"
      responses:
        '200':
          description: Weather page HTML
          content:
            text/html:
              schema:
                type: string

  /health:
    get:
      tags:
        - Health
      summary: Health check
      description: Returns the health status of the API
      operationId: healthCheck
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00Z"

components:
  schemas:
    Todo:
      type: object
      required:
        - id
        - title
        - completed
        - createdAt
      properties:
        id:
          type: string
          description: Unique identifier for the todo
          example: "1"
        title:
          type: string
          description: Todo title/description
          minLength: 1
          maxLength: 500
          example: "Buy groceries"
        completed:
          type: boolean
          description: Whether the todo is completed
          example: false
        createdAt:
          type: string
          format: date-time
          description: ISO 8601 timestamp of creation
          example: "2024-01-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: ISO 8601 timestamp of last update
          example: "2024-01-15T14:20:00Z"

    WeatherData:
      type: object
      required:
        - generationtime_ms
        - current
        - hourly
        - daily
      properties:
        generationtime_ms:
          type: number
          description: API response generation time in milliseconds
          example: 0.5
        current:
          type: object
          description: Current weather conditions
          properties:
            temperature_2m:
              type: number
              description: Temperature in Celsius
              example: 22.5
            wind_speed_10m:
              type: number
              description: Wind speed in km/h
              example: 15.3
            weather_code:
              type: integer
              description: WMO weather code
              example: 0
            is_day:
              type: integer
              description: Whether it's daytime (1) or nighttime (0)
              example: 1
        hourly:
          type: object
          description: Hourly forecast data
          properties:
            time:
              type: array
              items:
                type: string
                format: date-time
              description: Array of timestamps
            temperature_2m:
              type: array
              items:
                type: number
              description: Hourly temperatures
            relative_humidity_2m:
              type: array
              items:
                type: number
              description: Hourly humidity percentages
            wind_speed_10m:
              type: array
              items:
                type: number
              description: Hourly wind speeds
        daily:
          type: object
          description: Daily forecast data (7 days)
          properties:
            time:
              type: array
              items:
                type: string
                format: date
              description: Array of dates
            weather_code:
              type: array
              items:
                type: integer
              description: Daily weather codes
            temperature_2m_max:
              type: array
              items:
                type: number
              description: Daily maximum temperatures
            temperature_2m_min:
              type: array
              items:
                type: number
              description: Daily minimum temperatures
            sunrise:
              type: array
              items:
                type: string
                format: date-time
              description: Sunrise times
            sunset:
              type: array
              items:
                type: string
                format: date-time
              description: Sunset times
            uv_index_max:
              type: array
              items:
                type: number
              description: Maximum UV index for each day
            precipitation_probability_max:
              type: array
              items:
                type: number
              description: Maximum precipitation probability (%)

    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: Error message
          example: "Failed to fetch TODOs"

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for authentication (if implemented)

security: []

externalDocs:
  description: Find more information in the project README
  url: https://github.com/your-repo/react-ssr-demo
